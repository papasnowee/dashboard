/* tslint:disable */
/* eslint-disable */
// @generated
// This file was automatically generated and should not be edited.

import {
  Vault_orderBy,
  OrderDirection,
  Vault_filter,
  Block_height,
  ProfitLogType,
} from './../../../types/globalTypes.d'

// ====================================================
// GraphQL query operation: VAULTS_QUERY
// ====================================================

export interface VAULTS_QUERY_vaults_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_currStrategy_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_currStrategy {
  __typename: 'Strategy'
  /**
   * strategy address
   */
  id: string
  /**
   * timestamp strategy was registered on the vault
   */
  timestamp: any
  /**
   * transaction strategy was registered on the vault
   */
  transaction: VAULTS_QUERY_vaults_currStrategy_transaction
  /**
   * aggregated profit generated by strategy
   */
  aggregatedProfit: any
  /**
   * aggregated fee for profit sharing
   */
  aggregatedFee: any
}

export interface VAULTS_QUERY_vaults_strategies_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_strategies {
  __typename: 'Strategy'
  /**
   * strategy address
   */
  id: string
  /**
   * timestamp strategy was registered on the vault
   */
  timestamp: any
  /**
   * transaction strategy was registered on the vault
   */
  transaction: VAULTS_QUERY_vaults_strategies_transaction
  /**
   * aggregated profit generated by strategy
   */
  aggregatedProfit: any
  /**
   * aggregated fee for profit sharing
   */
  aggregatedFee: any
}

export interface VAULTS_QUERY_vaults_underlying {
  __typename: 'Token'
  /**
   * token address
   */
  id: string
  name: string
  symbol: string
  decimals: number
}

export interface VAULTS_QUERY_vaults_fToken {
  __typename: 'Token'
  /**
   * token address
   */
  id: string
  name: string
  symbol: string
  decimals: number
}

export interface VAULTS_QUERY_vaults_currPool {
  __typename: 'Pool'
  /**
   * pool address
   */
  id: string
}

export interface VAULTS_QUERY_vaults_doHardWorks_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_doHardWorks_strategy_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_doHardWorks_strategy {
  __typename: 'Strategy'
  /**
   * strategy address
   */
  id: string
  /**
   * timestamp strategy was registered on the vault
   */
  timestamp: any
  /**
   * transaction strategy was registered on the vault
   */
  transaction: VAULTS_QUERY_vaults_doHardWorks_strategy_transaction
  /**
   * aggregated profit generated by strategy
   */
  aggregatedProfit: any
  /**
   * aggregated fee for profit sharing
   */
  aggregatedFee: any
}

export interface VAULTS_QUERY_vaults_doHardWorks_sharePriceChangeLog {
  __typename: 'SharePriceChangeLog'
  /**
   * transaction hash
   */
  id: string
  /**
   * share price before do hardwork
   */
  oldSharePrice: any
  /**
   * share price after do hard work
   */
  newSharePrice: any
}

export interface VAULTS_QUERY_vaults_doHardWorks_profitLog {
  __typename: 'ProfitLog'
  /**
   * transaction hash
   */
  id: string
  /**
   * type of profit log event
   */
  type: ProfitLogType
  /**
   * profit amount
   */
  profitAmount: any
  /**
   * fee for profit share
   */
  feeAmount: any
}

export interface VAULTS_QUERY_vaults_doHardWorks {
  __typename: 'DoHardWork'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  transaction: VAULTS_QUERY_vaults_doHardWorks_transaction
  /**
   * strategy that was used for hardwork
   */
  strategy: VAULTS_QUERY_vaults_doHardWorks_strategy
  /**
   * price per full share after do hard work
   */
  pricePerFullShare: any
  /**
   * balance in vault at time of hard work
   */
  balanceInVault: any
  /**
   * balance in vault including invested portion
   */
  balanceWithInvestment: any
  /**
   * event associated with share price change emitted by controller
   */
  sharePriceChangeLog: VAULTS_QUERY_vaults_doHardWorks_sharePriceChangeLog | null
  /**
   * profit log associated with do hard work - note that it might not exist
   */
  profitLog: VAULTS_QUERY_vaults_doHardWorks_profitLog | null
}

export interface VAULTS_QUERY_vaults_withdrawals_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_withdrawals_user {
  __typename: 'User'
  /**
   * address of user account
   */
  id: string
}

export interface VAULTS_QUERY_vaults_withdrawals {
  __typename: 'Withdrawal'
  id: string
  timestamp: any
  transaction: VAULTS_QUERY_vaults_withdrawals_transaction
  user: VAULTS_QUERY_vaults_withdrawals_user
  amount: any
}

export interface VAULTS_QUERY_vaults_deposits_transaction {
  __typename: 'Transaction'
  /**
   * transaction hash
   */
  id: string
  timestamp: any
  blockNumber: any
  blockHash: any
  from: any
  to: any | null
  value: any
  gasUsed: any
  gasPrice: any
}

export interface VAULTS_QUERY_vaults_deposits_user {
  __typename: 'User'
  /**
   * address of user account
   */
  id: string
}

export interface VAULTS_QUERY_vaults_deposits {
  __typename: 'Deposit'
  id: string
  timestamp: any
  transaction: VAULTS_QUERY_vaults_deposits_transaction
  user: VAULTS_QUERY_vaults_deposits_user
  amount: any
}

export interface VAULTS_QUERY_vaults {
  __typename: 'Vault'
  /**
   * address of the vault
   */
  id: string
  /**
   * timestamp vault was registered at the controller
   */
  timestamp: any
  /**
   * transaction vault was registered at the controller
   */
  transaction: VAULTS_QUERY_vaults_transaction
  /**
   * current strategy
   */
  currStrategy: VAULTS_QUERY_vaults_currStrategy
  /**
   * all strategies
   */
  strategies: VAULTS_QUERY_vaults_strategies[]
  /**
   * token locked up in vault
   */
  underlying: VAULTS_QUERY_vaults_underlying
  /**
   * returned share token
   */
  fToken: VAULTS_QUERY_vaults_fToken
  /**
   * most recent pool as detected by NotifyHelper is usually not null
   */
  currPool: VAULTS_QUERY_vaults_currPool | null
  /**
   * hard work done on vault
   */
  doHardWorks: VAULTS_QUERY_vaults_doHardWorks[]
  withdrawals: VAULTS_QUERY_vaults_withdrawals[]
  deposits: VAULTS_QUERY_vaults_deposits[]
}

export interface VAULTS_QUERY {
  vaults: VAULTS_QUERY_vaults[]
}

export interface VAULTS_QUERYVariables {
  skip?: number | null
  first?: number | null
  orderBy?: Vault_orderBy | null
  orderDirection?: OrderDirection | null
  where?: Vault_filter | null
  block?: Block_height | null
}
